import wx
import random

from datetime import datetime
from backend.openrom import OpenFile
from backend.randomain import Randomization

    # Imma be real, I really wanted a way to separate this all into
    # separate .py files, but I could not get it to
    # work, so now all of this is just one GIGANTIC file
    # 
    # At least I separated a few things into their own .py files...


class MainWindow(wx.Frame):

    def __init__(self, parent, title, style):   # Inclusion of style to disable window resizing
        self.dirname = ''                       # Set a default directory
        self.IsFileOpen = False                 # Set a few empty properties that will be used later
        self.fileObj = ''
        random.seed(datetime.now().timestamp())

        wx.Frame.__init__(self, parent, title=title, size=(825,600), style=style)   # Override the default __init__

        panel = wx.Panel(self, wx.ID_ANY)  # Panel to allow the window look good regardless of platform
        panel.SetBackgroundColour(wx.Colour(142, 121, 195))

        icon = wx.Icon()        # App icon
        icon.CopyFromBitmap(wx.Bitmap("appicon.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(icon)

            # This is all fine in the main file.
    #  **********************   Toolbar Creation   **********************  #
        self.CreateStatusBar() #* A Statusbar in the bottom of the window; Placed here because it's a single line
        
        # Setting up the toolbar with two dropdowns
        filemenu = wx.Menu()
        infomenu = wx.Menu()

        # Appending items to the first dropdown in the toolbar
        toolbarFile = filemenu.Append(wx.ID_OPEN, "&Open", " Open ROM")
        filemenu.AppendSeparator()
        toolbarExit = filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program")

        # Appending items to the second dropdown 
        toolbarHelp = infomenu.Append(wx.ID_HELP, "&Help"," Important notes about the program")
        infomenu.AppendSeparator()
        toolbarAbout = infomenu.Append(wx.ID_ABOUT, "&About"," Information about this program")

        # Creating the menubar.
        menuBar = wx.MenuBar()
        menuBar.Append(filemenu,"&File") # Adding the "filemenu" to the MenuBar


        menuBar.Append(infomenu,"&Info") # Adding the "filemenu" to the MenuBar

        self.SetMenuBar(menuBar)  # Adding the MenuBar to the Frame content.

        # Set events
        self.Bind(wx.EVT_MENU, self.fileOpen, toolbarFile)
        self.Bind(wx.EVT_MENU, self.clickExit, toolbarExit)

        self.Bind(wx.EVT_MENU, self.clickHelp, toolbarHelp)
        self.Bind(wx.EVT_MENU, self.clickAbout, toolbarAbout)

        




    #  **********************   Actual Window Content   **********************  #
            # Dude there's so much here that I would like to put into its own separate file
            # just to keep things clean...
            # Best I can do is just organize and label things


                #  **************   Header objects   **************  #
            # Filepath display objects
        pathName = wx.StaticText(panel, label="File Path:")     # Text object to label the filepath text object
        pathName.SetBackgroundColour(wx.Colour(142, 121, 195))  # Match the panel color. Looks ugly otherwise
        self.textFileObj = wx.TextCtrl(panel, style=wx.TE_READONLY) # Disable the ability to edit the filepath textfield
        self.textFileObj.SetToolTip('Go to "File > Open" and choose the ROM to randomize')

            # Seed objects
        seedName = wx.StaticText(panel, label="Seed:")      
        seedName.SetBackgroundColour(wx.Colour(142, 121, 195))  
        self.textSeedObj = wx.SpinCtrl(panel, min=0, max=2000000000) # Max value for the seed because idk, avoid compatibility problems?
        self.textSeedObj.SetToolTip("If left empty, a seed will be autogenerated for you")
        seedBtn = wx.Button(panel, id=wx.ID_ANY, label="Generate Seed")
        self.Bind(wx.EVT_BUTTON, self.getSeed, seedBtn)

            # Line to separate the two text boxes from the settings
        headerLine= wx.StaticLine(panel, style=wx.LI_HORIZONTAL, size=(700, 1))


                #  **************   Randomization Options   **************  #

            # Create the options for personal base randomization
        listStatOptions = ['Do Not Randomize', 'Shuffle Personal Stats', 'Randomize Stats']
        self.statsOptions = wx.RadioBox(panel, wx.ID_ANY, "Personal Stats", wx.DefaultPosition,
                       wx.DefaultSize, listStatOptions, 1, wx.RA_SPECIFY_COLS)
        self.statsOptions.Bind(wx.EVT_RADIOBOX,self.isBasesRandoOn)

            # Spinboxes for min and max range of bases rando
        baseMin = wx.StaticText(panel, label="Min: ")
        self.basesMinBtn = wx.SpinCtrl(panel, min=1, max=10, initial=4)
        self.basesMinBtn.Enable(False)
        self.basesMinBtn.SetToolTip("The lowest a stat can roll")
        baseMax = wx.StaticText(panel, label="Max: ")
        self.basesMaxBtn = wx.SpinCtrl(panel, min=10, max=30, initial=21)    # Max value to not completely break game difficulty
        self.basesMaxBtn.Enable(False)
        self.basesMaxBtn.SetToolTip("The highest a stat can roll")
        baseTotal = wx.StaticText(panel, label="Total:")
        self.basesTotBtn = wx.SpinCtrl(panel, min=90, max=150, initial=121)
        self.basesTotBtn.Enable(False)
        self.basesTotBtn.SetToolTip("Base Stat Total (BST) that the randomizer logic will try to follow")
        baseVar = wx.StaticText(panel, label="Delta:")
        self.basesVarBtn = wx.SpinCtrl(panel, min=1, max=50, initial=25)
        self.basesVarBtn.Enable(False)
        self.basesVarBtn.SetToolTip("Varience from BST permitted. Lower varience = longer processing time")


        self.statsOptions.SetItemToolTip(0, "Do not change personal stats")
        self.statsOptions.SetItemToolTip(1, "Shuffle personal stats. I.e. Str value moves to Int")
        self.statsOptions.SetItemToolTip(2, "Randomize comepletely within the specified range")
            
            # Options for growths randomization
        listGrowthsOptions = ['Do Not Randomize', 'Randomize Growths']
        self.growthsOptions = wx.RadioBox(panel, wx.ID_ANY, "Growths", wx.DefaultPosition,
                       wx.DefaultSize, listGrowthsOptions, 1, wx.RA_SPECIFY_COLS)
        self.growthsOptions.Bind(wx.EVT_RADIOBOX,self.isGrowthsRandoOn)

            # Spinboxes to control growths rando
        growthChance = wx.StaticText(panel, label="Chance:")
        self.growthsChanceBtn = wx.SpinCtrl(panel, min=1, max=100, initial=50)
        self.growthsChanceBtn.Enable(False)
        self.growthsChanceBtn.SetToolTip("Percent chance of a proficiency having a growth above 0\n\
If a growth does not roll successfully, it WILL be set to 0\n\
A growth of 0 does NOT mean it will not grow, it only reduces the rate of growth")
        growthMax = wx.StaticText(panel, label="Max: ")
        self.growthsMaxBtn = wx.SpinCtrl(panel, min=1, max=7, initial=3)
        self.growthsMaxBtn.Enable(False)
        
        self.growthsMaxBtn.SetToolTip("Maximum growth allowed in a proficiency\n\
A higher growth means a faster rate of leveling")

            #!TODO Options for Base HP/LP randomization

            # Options for Proficiency bases randomization
                #Internal checkbox for magic; Need to make magicks exclusive from each other
        listProfOptions = ['Do Not Randomize','Shuffle Proficiencies', 'Randomize Proficiencies']
        self.profOptions = wx.RadioBox(panel, wx.ID_ANY, "Weapon Proficiency", wx.DefaultPosition,
                       wx.DefaultSize, listProfOptions, 1, wx.RA_SPECIFY_COLS)
        #self.profOptions.Bind(wx.EVT_RADIOBOX,self.isProfRandoOn)

        profChanceLabel = wx.StaticText(panel, label="Chance: ")
        self.profChanceBtn = wx.SpinCtrl(panel, min=0, max=100, initial=30)
        self.profChanceBtn.Enable(False)
        self.profChanceBtn.SetToolTip("The chance a proficiency base is above 0")
        profMaxLabel = wx.StaticText(panel, label="Max: ")
        self.profMaxBtn = wx.SpinCtrl(panel, min=1, max=31, initial=5)
        self.profMaxBtn.Enable(False)
        self.profMaxBtn.SetToolTip("The highest a proficiency base can roll")
        self.profGrow = wx.CheckBox(panel, -1, "Grow outside of party")
        self.profGrow.SetToolTip("Add a chance for a proficiency to grow while the party member is\n\
outside the party. \nBy default, this flag is not applied to randomized proficiency bases")
        
        # Spinbox for the checkbox
        # Magic options?
        

        self.profOptions.SetItemToolTip(0, "Do not change proficiency bases")
        self.profOptions.SetItemToolTip(1, "Shuffle proficiency bases I.e. 5 Sword rank becomes 5 Kung Fu")
        self.profOptions.SetItemToolTip(2, "Completely randomize weapon proficiency bases (DOES NOT REFER TO PERSONAL STATS)")


            #!TODO Growth Type, Spark Type, Special Weapon, Inherit Magic

            # Quantum Decoupling of Tatyana
        self.tatyanaCheck = wx.CheckBox(panel,-1, "Split Tatyana")
        self.tatyanaCheck.SetToolTip("Make Tatyana's different aliases (Souffle, Bavarois) have different stats")

            #!TODO Randomize recruitment (Actually just changes graphics and names; Not confident enough to edit IDs)

            #!TODO Undead, Discount, Banned magic flags

            #!TODO Chest Content

            #!TODO Boss Shuffle (Need to figure a system to make HP and proficiencies scale up/down)

            # Button to randomize
        theMagicButton = wx.Button(panel, id=wx.ID_ANY, label="Randomize")
        self.Bind(wx.EVT_BUTTON, self.doTheThing, theMagicButton)




                # I probably would put all this into the same file
                # as the above content, but alas, it's here
    #  **********************   Sizer Creation and Set up   **********************  #
            # Create the sizers that will be used
        mainSizer = wx.BoxSizer(wx.VERTICAL)        # Top level sizer holds everything in place
        pathSizer = wx.BoxSizer(wx.HORIZONTAL)      # First sub-sizer holds filepath
        seedSizer = wx.BoxSizer(wx.HORIZONTAL)      # One below holds seed

        bodySizer = wx.GridBagSizer(vgap=10, hgap=10)   # Main body; Will contain other sub-sizers
        basesOptSizer = wx.GridBagSizer(vgap=7, hgap=2)
        growthsOptSizer = wx.GridBagSizer(vgap=5, hgap=5)
        profOptSizer = wx.GridBagSizer(vgap=7, hgap=2)

            # Set up the filepath sizer
        pathSizer.Add((95,1), proportion=0)
        pathSizer.Add(pathName, proportion=0, flag= wx.ALIGN_CENTER | wx.ALL, border=1)
        pathSizer.Add(self.textFileObj, proportion=3, flag=wx.ALIGN_CENTER | wx.ALL, border=10)
        pathSizer.Add((75,1), proportion=0)

            # Set up the seed sizer
        seedSizer.Add((95,1), proportion=0)
        seedSizer.Add(seedName, proportion=0, flag= wx.ALIGN_CENTER | wx.TOP | wx.RIGHT, border=10)
        seedSizer.Add(self.textSeedObj, proportion=3, flag=wx.ALIGN_CENTER | wx.TOP | wx.RIGHT, border=10)
        seedSizer.Add(seedBtn, proportion=0, flag=wx.TOP, border=10)
        seedSizer.Add((75,1), proportion=0)


            # Set up the personal stats sizer
        basesOptSizer.Add(self.statsOptions, pos=(0,0), span=(1,4), flag=wx.LEFT, border=1)

        basesOptSizer.Add(baseMin, pos=(1, 0),flag=wx.ALL | wx.ALIGN_CENTER, border=1)
        basesOptSizer.Add(self.basesMinBtn, pos=(1,1), flag=wx.LEFT | wx.RIGHT, border=1)
        basesOptSizer.Add(baseMax, pos=(2, 0), flag=wx.ALL | wx.ALIGN_CENTER, border=1)
        basesOptSizer.Add(self.basesMaxBtn, pos=(2,1), flag=wx.LEFT | wx.RIGHT, border=1)

        basesOptSizer.Add(baseTotal, pos=(1, 2), flag=wx.LEFT | wx.ALIGN_CENTER, border=10)
        basesOptSizer.Add(self.basesTotBtn, pos=(1,3), flag=wx.LEFT | wx.RIGHT, border=0)
        basesOptSizer.Add(baseVar, pos=(2, 2), flag=wx.LEFT | wx.ALIGN_CENTER, border=6)
        basesOptSizer.Add(self.basesVarBtn, pos=(2,3), flag=wx.LEFT | wx.RIGHT, border=0)

            # Set up the growths sizer
        growthsOptSizer.Add(self.growthsOptions, pos=(0,0), span=(1, 2), flag=wx.ALL, border=1)
        growthsOptSizer.Add(growthChance, pos=(1, 0), flag=wx.LEFT | wx.ALIGN_CENTER, border=18)
        growthsOptSizer.Add(self.growthsChanceBtn, pos=(1,1), flag=wx.ALL, border=1)
        growthsOptSizer.Add(growthMax, pos=(2, 0), flag=wx.LEFT | wx.ALIGN_CENTER, border=45)
        growthsOptSizer.Add(self.growthsMaxBtn, pos=(2,1), flag=wx.ALL, border=2)

            # Set up the proficiency sizer
        profOptSizer.Add(self.profOptions, pos=(0,0), span=(1,2), flag=wx.LEFT, border=1)
        profOptSizer.Add(profChanceLabel, pos=(1,0), flag=wx.ALL | wx.ALIGN_CENTER, border=1)
        profOptSizer.Add(self.profChanceBtn, pos=(1,1), flag=wx.LEFT | wx.RIGHT, border=1)
        profOptSizer.Add(profMaxLabel, pos=(2,0), flag=wx.ALL | wx.ALIGN_CENTER, border=1)
        profOptSizer.Add(self.profMaxBtn, pos=(2,1), flag=wx.LEFT | wx.RIGHT, border=1)

        profOptSizer.Add(self.profGrow, pos=(3, 0), span=(1,2))

            # Set up the body sizer
        bodySizer.Add(basesOptSizer, pos=(0,0))
        bodySizer.Add(growthsOptSizer, pos=(1, 0), flag=wx.TOP, border=5)
        bodySizer.Add(self.tatyanaCheck, pos=(2, 0), flag=wx.LEFT, border=15)
        bodySizer.Add(profOptSizer, pos=(0, 1), flag=wx.LEFT, border=40)

        bodySizer.Add(theMagicButton, pos=(3,5))


            # Set up the top level sizer
        mainSizer.Add(pathSizer, proportion=0, flag=wx.EXPAND | wx.TOP, border=10)
        mainSizer.Add(seedSizer, proportion=0, flag= wx.BOTTOM, border=10)
        mainSizer.Add(headerLine, proportion=0, flag=wx.EXPAND | wx.LEFT | wx.RIGHT, border=35)
        mainSizer.Add(bodySizer, proportion=0, flag=wx.ALIGN_LEFT | wx.ALL, border=25)
        
        panel.SetSizer(mainSizer)
        mainSizer.Fit(panel)


        self.Show(True)





                # This stuff? I don't know man.
                # What would go into a separate file and what would stay here?
    #  *************************************   Event methods   *************************************  #
                #  **************   IO Method   **************  # 
                    # IO stuff is fine here actually
        # Open and read the ROM file
    def fileOpen(self, e):
                # Allow only SNES ROM files to be selected
        dlg = wx.FileDialog(self, "Choose a file", self.dirname, "", "SNES ROM files (*.sfc;*.smc;*.spc)|*.sfc;*.smc;*spc", wx.FD_OPEN)

        if dlg.ShowModal() == wx.ID_CANCEL: return
                # Return back to main if cancel or the X is clicked

        self.filename = dlg.GetFilename()
        self.dirname = dlg.GetDirectory()

        try:
            file1 = OpenFile(self.dirname +'\\'+ self.filename)  # Call the backend to open the ROM file and get the ROM data
        except:
            dialogue = wx.MessageDialog(self, 'Incompatible ROM selected, please choose\n\
a v1.1 JP, Mana Sword EN, or Magno ES ROM.', 'File Error', style=wx.OK | wx.ICON_ERROR)
            dialogue.ShowModal()
            dialogue.Destroy()
            return            

        self.getromdata = file1.getData()          # Receive the file data from the openrom class

        self.fileObj = self.getromdata[0]          # Pull ROM data from the data returned
        
        print("Received", type(self.fileObj),"object from backend.")    # Testing if the ROM was properly opened
        print("The ROM is" , len(self.fileObj)/1024,"Kilobytes")        # It should read as 4096 Kilobytes
        
        dlg.Destroy()               # Close the window

        self.textFileObj.Clear()
        self.textFileObj.WriteText(self.dirname +"\\"+ self.filename)

                #  **************   Toolbar Control Methods   **************  #

    def clickHelp(self, e):
                # Message displays when clicking the 'About' button
            dlg = wx.MessageDialog(self, "Please Remember\n\n\
When setting variance, if the min and max stat rolls\n\
are too low/high, it is possible for the logic to get\n\
stuck. Please use your own discretion to avoid this.", "About RS3Rando")    # I don't like how this is formatted, 
            dlg.ShowModal()                                             # but it looks ugly otherwise
            dlg.Destroy()


    def clickAbout(self, e):
                # Message displays when clicking the 'About' button
            dlg = wx.MessageDialog(self, "v0.1\n\n\
Currently only supports v1.1 JP RS3 .sfc/.smc files\n\n\
Coded using Python 3 with wxPython GUI libraries", "About RS3Rando")    # I don't like how this is formatted, 
            dlg.ShowModal()                                             # but it looks ugly otherwise
            dlg.Destroy()

    def clickExit(self, e): self.Close(True)



                #  **************   Option Control Methods    **************  #
            # This stuff would go where the objects are, but again, here it is
            # in the main file
    def getSeed(self, e): self.textSeedObj.SetValue(random.randrange(1000, 2000000000))

    def isBasesRandoOn(self, e):
        print(e.GetSelection())
        if(e.GetSelection() == 2):  # One could say calling a specific method on undetermined object e is dangerous, I say "Skate or Die"
            self.basesMinBtn.Enable(True)
            self.basesMaxBtn.Enable(True)
            self.basesTotBtn.Enable(True)
            self.basesVarBtn.Enable(True)
        else:
            self.basesMinBtn.Enable(False)
            self.basesMaxBtn.Enable(False)
            self.basesTotBtn.Enable(False)
            self.basesVarBtn.Enable(False)

    def isGrowthsRandoOn(self, e):
        print(e.GetSelection())
        if(e.GetSelection() == 1):
            self.growthsChanceBtn.Enable(True)
            self.growthsMaxBtn.Enable(True)
        else:
            self.growthsChanceBtn.Enable(False)
            self.growthsMaxBtn.Enable(False)
            


    def getOptions(self):
        opt = []

            # Get seed, accounting for if a seed of 0 was entered
        if self.textSeedObj.GetValue() == 0:
            print("No Seed Entered, generating seed automatically")
            opt.append(random.randrange(1, 2000000000))
        else:
            opt.append(self.textSeedObj.GetValue())

            # Add the randomizer options to the list
        opt.append(self.tatyanaCheck.GetValue())
        opt.append(self.statsOptions.GetSelection())
        opt.append(self.basesMinBtn.GetValue())
        opt.append(self.basesMaxBtn.GetValue())
        opt.append(self.basesTotBtn.GetValue())
        opt.append(self.basesVarBtn.GetValue())
        
        opt.append(self.growthsOptions.GetSelection())
        opt.append(self.growthsChanceBtn.GetValue())
        opt.append(self.growthsMaxBtn.GetValue())

        return opt


                        # This is fine in the main, but adding everything to 
                        # the list is kinda ugly. Oh well
                #  **************   Commence the Randomization    **************  #
    def doTheThing(self, e):
            #TODO: I will need a better way to check if the ROM is correct at some point in the future
        if len(self.fileObj) < 4194304 :
            dialogue = wx.MessageDialog(self, 'No ROM chosen!', 'File Error', style=wx.OK | wx.ICON_WARNING)
            dialogue.ShowModal()
            dialogue.Destroy()
            return
        
        fdlg = wx.FileDialog(self, "Input setting file path", "", "", "SNES ROM File (*.sfc)|*.sfc", wx.FD_SAVE)
        if fdlg.ShowModal() != wx.ID_OK:
            return
        
        self.save_path = fdlg.GetPath()

        print("Calling the randomization class")
        randoObj = Randomization(self.fileObj, self.getromdata[1])  # Modified to send ROM version.
        
        # This sends the file data to randomizationlogic.py, which then reads the bytes object, which is
        #    immutable, and converts it to a bytestream object, which is mutable.

            # Get the options chosen
        chosenOptions = self.getOptions()
        
        
            # Send list of settings to perform operation on the rom bytearray
        print("Sending a list of the settings")
        try:
            randoObj.main(chosenOptions)
        except Exception as e:
            dialogue = wx.MessageDialog(self, 'Error occured when randomizing, if the issue\n\
persists, please inform Draco9325.\n'+str(e), 'Logic Error', style=wx.OK | wx.ICON_ERROR)
            dialogue.ShowModal()
            dialogue.Destroy()
            return

        print("Randomization math finished, writing to file...")
        
            # Finally, write the ROM to the specified filepath
        try:
            randoObj.writeToSFC(self.save_path)

            dialogue = wx.MessageDialog(self, 'Success!\n\n\
ROM Written to '+self.save_path+'\n\nSave Changelog?', 'Save Successful', style=wx.YES_NO | wx.ICON_INFORMATION)
            if dialogue.ShowModal() != wx.ID_YES:            # IT'S SO UGLY!!! WHY DO I HAVE TO REMOVE THE SPACES!!
                return
            
            writelist = [chosenOptions[0], chosenOptions[1], chosenOptions[2], chosenOptions[7]]
            randoObj.writeChangelog(writelist, self.save_path)
            
            dialogue = wx.MessageDialog(self, 'Changelog saved next to ROM.', 'File Saved', style=wx.OK | wx.ICON_INFORMATION)
            dialogue.ShowModal()
            dialogue.Destroy()      # End of process, inform user of changelog.


        except Exception as e:
            dialogue = wx.MessageDialog(self, 'Critical Error\n\nError writing to '+self.save_path+'\n'+e,
                                        'File Error', style=wx.OK | wx.ICON_ERROR)
            print(e)
            dialogue.ShowModal()
            dialogue.Destroy()
            return


# Main calling
if __name__=='__main__':
    app = wx.App(False)
    frame = MainWindow(None, "RS3Rando", style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)
    frame.Show()            # I seriously think there's a better way to initialize the window. oh well
    app.MainLoop()